module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function u(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.app=t.server=void 0,n(1);const i=n(2),a=n(3),u=o(n(4)),s=o(n(5)),c=o(n(6)),d=n(7),l=o(n(8)),p=n(9),f=o(n(10)),_=n(11);t.server=c.default();const h=()=>a.h("div",null,"SSR would be coming soon but I need to research what to do with style-loader");t.server.get("/api/sponsors",f.default(),(e,t)=>r(void 0,void 0,void 0,(function*(){const e=yield _.cache("FIXME",()=>d.requestGraphQL("https://api.opencollective.com/graphql/v2",l.default,{"Api-Key":p.OPEN_COLLECTIVE_API_KEY}));t.send(e)}))),t.server.get("/api/contributors",f.default(),(e,t)=>r(void 0,void 0,void 0,(function*(){const e=yield _.cache("REPLACE ME WITH REAL CAHCE LIBRARY",()=>d.getJSON("https://api.github.com/repos/date-fns/date-fns/contributors?per_page=999"));t.send(e)}))),t.server.get("*",(e,t)=>{const n=u.default(a.h(h,{url:e.url}));t.send(s.default({body:n,entry:"/static/script.js"}))}),t.app=i.https.onRequest(t.server)},function(e,t){e.exports=require("isomorphic-fetch")},function(e,t){e.exports=require("firebase-functions")},function(e,t){e.exports=require("preact")},function(e,t){e.exports=require("preact-render-to-string")},function(module,exports){module.exports=function anonymous(locals,escapeFn,include,rethrow){rethrow=rethrow||function(e,t,n,r,o){var i=t.split("\n"),a=Math.max(r-3,0),u=Math.min(i.length,r+3),s=o(n),c=i.slice(a,u).map((function(e,t){var n=t+a+1;return(n==r?" >> ":"    ")+n+"| "+e})).join("\n");throw e.path=s,e.message=(s||"ejs")+":"+r+"\n"+c+"\n\n"+e.message,e},escapeFn=escapeFn||function(e){return null==e?"":String(e).replace(_MATCH_HTML,encode_char)};var _ENCODE_HTML_RULES={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"},_MATCH_HTML=/[&<>'"]/g;function encode_char(e){return _ENCODE_HTML_RULES[e]||e}var __line=1,__lines='<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <title>date-fns — modern JavaScript date utility library</title>\n  </head>\n  <body>\n    <div id="root">\n      <% if (typeof body !== \'undefined\') { %>\n        <%- body %>\n      <% } %>\n    </div>\n\n    <% if (typeof entry !== \'undefined\') { %>\n      <script src="<%= entry %>"><\/script>\n    <% } %>\n  </body>\n</html>\n',__filename="src/server/template.ejs";try{var __output="";function __append(e){null!=e&&(__output+=e)}with(locals||{})__append('<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <title>date-fns — modern JavaScript date utility library</title>\n  </head>\n  <body>\n    <div id="root">\n      '),__line=9,"undefined"!=typeof body&&(__append("\n        "),__line=10,__append(body),__append("\n      "),__line=11),__append("\n    </div>\n\n    "),__line=14,"undefined"!=typeof entry&&(__append('\n      <script src="'),__line=15,__append(escapeFn(entry)),__append('"><\/script>\n    '),__line=16),__append("\n  </body>\n</html>\n"),__line=19;return __output}catch(e){rethrow(e,__lines,__filename,__line,escapeFn)}}},function(e,t){e.exports=require("express")},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function u(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))};function o(e,t={}){return r(this,void 0,void 0,(function*(){const{method:n="GET",data:r,headers:o={}}=t;let i=o,a={mode:"cors"};r&&("GET"===n||(a=Object.assign(Object.assign({},a),{body:JSON.stringify(r)}),i=Object.assign(Object.assign({},i),{"Content-Type":"application/json"})));const u=yield fetch(e,Object.assign(Object.assign({},a),{method:n,headers:new Headers(i)})),{status:s}=u;return u}))}function i(e,t={}){var n;return r(this,void 0,void 0,(function*(){return(yield o(e,Object.assign(Object.assign({},t),{headers:Object.assign(Object.assign({},null!==(n=t.headers)&&void 0!==n?n:{}),{Accept:"application/json"})}))).json()}))}Object.defineProperty(t,"__esModule",{value:!0}),t.requestGraphQL=t.getJSON=t.requestJSON=t.request=void 0,t.request=o,t.requestJSON=i,t.getJSON=function(e,t={}){return i(e,Object.assign(Object.assign({},t),{method:"GET"}))},t.requestGraphQL=function(e,t,n){return i(e,{method:"POST",data:{query:t},headers:n})}},function(e,t,n){"use strict";n.r(t),t.default='query {\n  account (slug: "date-fns") {\n    orders (limit: 1000) {\n      totalCount\n      nodes {\n        fromAccount {\n          name\n          imageUrl\n          slug\n          website\n        }\n        createdAt\n        updatedAt\n        status\n        amount {\n          value\n        }\n        totalDonations {\n          value\n        }\n        tier {\n          slug\n        }\n      }\n    }\n  }\n}'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FIREBASE_APP=t.OPEN_COLLECTIVE_API_KEY=void 0,t.OPEN_COLLECTIVE_API_KEY="a4ec7982f7d8a118863c6107d8d554a444cb0d4c",t.FIREBASE_APP={apiKey:"AIzaSyBQhFyhhZ496Btpt4CFRC2aheSlL71ombc",authDomain:"november-experiment.web.app",projectId:"november-experiment",databaseURL:"https://november-experiment.firebaseio.com/"}},function(e,t){e.exports=require("cors")},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function u(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.cache=void 0;const i=o(n(12)),a={};t.cache=function(e,t){return r(this,void 0,void 0,(function*(){if(!a[e]||a[e].lastUpdated<i.default(new Date,1)){const n=yield t();a[e]={response:n,lastUpdated:new Date}}return a[e].response}))}},function(e,t){e.exports=require("date-fns/subDays")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,